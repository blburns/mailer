#!/bin/sh
### BEGIN INIT INFO
# Provides:          dreamlikelabs-mailer
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: DreamlikeLabs Flask app via Waitress
### END INIT INFO

set -u

APP_NAME=mailer

ENV_FILE=/etc/dreamlikelabs/${APP_NAME}/env.conf
[ -r "$ENV_FILE" ] && . "$ENV_FILE"

: ${APP_HOME:="/opt/dreamlikelabs/${APP_NAME}"}
: ${VENV:="${APP_HOME}/venv"}
: ${USER:="www-data"}
: ${GROUP:="www-data"}
: ${PORT:="5025"}
: ${THREADS:="4"}
: ${TIMEOUT:="60"}
: ${PIDFILE:="/var/run/dreamlikelabs/${APP_NAME}/app.pid"}
: ${LOGFILE:="/var/log/dreamlikelabs/${APP_NAME}/app.log"}

DAEMON="${VENV}/bin/waitress-serve"
DAEMON_OPTS="--listen=127.0.0.1:${PORT} --threads=${THREADS} --channel-timeout=${TIMEOUT} app:app"

NAME="dreamlikelabs-${APP_NAME}"

log() {
    printf '%s %s\n' "[$(date '+%Y-%m-%d %H:%M:%S')]" "$*"
}

is_running() {
    if [ -f "$PIDFILE" ]; then
        PID=$(cat "$PIDFILE" 2>/dev/null || echo '')
        if [ -n "$PID" ] && kill -0 "$PID" 2>/dev/null; then
            return 0
        fi
    fi
    return 1
}

prepare_dirs() {
    RUN_DIR=$(dirname "$PIDFILE")
    LOG_DIR=$(dirname "$LOGFILE")
    mkdir -p "$RUN_DIR" "$LOG_DIR"
    chown -R "$USER":"$GROUP" "$LOG_DIR" 2>/dev/null || true
    touch "$LOGFILE" 2>/dev/null || true
}

start() {
    if is_running; then
        log "$NAME already running (pid $(cat $PIDFILE)) on 127.0.0.1:${PORT}"
        return 0
    fi
    prepare_dirs
    if [ ! -x "$DAEMON" ]; then
        log "ERROR: DAEMON not executable: $DAEMON"; return 1
    fi
    log "Starting $NAME as $USER:$GROUP"
    log "Command: $DAEMON $DAEMON_OPTS"
    if command -v start-stop-daemon >/dev/null 2>&1; then
        start-stop-daemon --start --background --make-pidfile --pidfile "$PIDFILE" \
            --chuid "$USER":"$GROUP" --chdir "$APP_HOME" --exec "$DAEMON" -- $DAEMON_OPTS >> "$LOGFILE" 2>&1
    else
        su -s /bin/sh -c "cd '$APP_HOME' && nohup '$DAEMON' $DAEMON_OPTS >> '$LOGFILE' 2>&1 & echo \$! > '$PIDFILE'" "$USER"
    fi
    sleep 1
    if is_running; then
        log "$NAME started (pid $(cat $PIDFILE))"
        return 0
    else
        log "ERROR: failed to start $NAME (see $LOGFILE)"
        return 1
    fi
}

stop() {
    if ! is_running; then
        if [ -f "$PIDFILE" ]; then rm -f "$PIDFILE"; fi
        log "$NAME is not running"
        return 0
    fi
    PID=$(cat "$PIDFILE")
    log "Stopping $NAME (pid $PID)"
    if command -v start-stop-daemon >/dev/null 2>&1; then
        start-stop-daemon --stop --pidfile "$PIDFILE" --retry TERM/20/KILL/5
    else
        kill "$PID" 2>/dev/null || true
        sleep 1
        kill -9 "$PID" 2>/dev/null || true
    fi
    RETVAL=$?
    rm -f "$PIDFILE" 2>/dev/null || true
    if [ $RETVAL -eq 0 ]; then
        log "$NAME stopped"
    else
        log "ERROR: failed stopping $NAME"
    fi
    return $RETVAL
}

restart() {
    stop && start
}

status() {
    if is_running; then
        PID=$(cat "$PIDFILE")
        echo "$NAME is running (pid $PID)"
        echo "  - app: ${APP_NAME}"
        echo "  - listen: 127.0.0.1:${PORT}"
        echo "  - threads: ${THREADS}"
        echo "  - log: ${LOGFILE}"
        return 0
    fi
    if [ -f "$PIDFILE" ]; then
        echo "$NAME not running, but pidfile exists at $PIDFILE"
        return 1
    fi
    echo "$NAME is not running"
    return 3
}

case "$1" in
    start)
        start ;;
    stop)
        stop ;;
    restart|force-reload)
        restart ;;
    status)
        status ;;
    *)
        echo "Usage: /etc/init.d/dreamlikelabs/${APP_NAME} {start|stop|restart|force-reload|status}"
        exit 1 ;;
esac

exit 0


